#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

currentBranch=`git rev-parse --abbrev-ref HEAD`
getLocalOrginCommand="git rev-parse origin/$currentBranch"

localOrginId=`$getLocalOrginCommand`

`git fetch`
echo local origin commit id=$localOrginId
remoteFetchId=`git rev-parse FETCH_HEAD`
fetchHead="FETCH_HEAD"

echo remote origin commit id=$remoteFetchId

if [ $localOrginId = $remoteFetchId ]
then
	localHeadId=`git rev-parse HEAD`
	echo local HEAD commit id=$localHeadId
	if [ $localHeadId = $localOrginId ]
	then
		echo your code is the latest, continue to commit!
		exit 0
	else
		remoteDate=`git log -1 origin/HEAD --pretty=format:"%ct"`
		echo the latest commit date on remote is=$(date -d @$remoteDate "+%F %T")
		loccalDate=`git log -1 --pretty=format:"%ct"`
		echo the latest commit date in local is=$(date -d @$loccalDate "+%F %T")
		
		if [ $remoteDate -gt $loccalDate ]
		then
			echo your code is not the latest in local, please update first!
			exit 1
		else
			echo your code is the latest, continue to commit!
			exit 0
		fi
	fi
elif [ $remoteFetchId = $fetchHead ]
	then
	echo your network cannot connect to the server, please check it!
	exit 1
else
	echo remote has the latest code, please update first!
	exit 1
fi
